name: XBee Firmware Quality Check

on:
  push:
  pull_request:

jobs:
  quality_check:
    name: 🧠 Lint, Syntax & Unit Tests
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 📦 Install dependencies
        run: |
          pip install flake8 black pytest pytest-cov mock mpremote sphinx sphinx-rtd-theme sphinx-markdown-builder myst-parser

      - name: 🧹 Lint code style (flake8)
        run: |
          echo "🔍 Checking for style and syntax issues..." | tee -a $GITHUB_STEP_SUMMARY
          flake8 code --max-line-length=120 --ignore=E402,E501,W503 | tee -a $GITHUB_STEP_SUMMARY || true

      - name: 🎨 Check formatting (black)
        run: |
          echo "🎨 Checking code format (black)..." | tee -a $GITHUB_STEP_SUMMARY
          black --check code | tee -a $GITHUB_STEP_SUMMARY || true

      - name: 🧠 MicroPython syntax validation
        run: |
          echo "🧠 Checking syntax compatibility..."
          for f in $(find code -name "*.py"); do
            echo "Validating syntax: $f"
            python -m py_compile "$f"
          done

      - name: 🧪 Run unit tests with coverage
        run: |
          echo "🧪 Running tests with coverage..."
          pytest -q --disable-warnings --cov=code --cov-report=term-missing || true

      - name: 📊 Upload coverage to summary
        run: |
          echo "## 📈 Coverage Report" >> $GITHUB_STEP_SUMMARY
          pytest -q --disable-warnings --cov=code --cov-report=term >> $GITHUB_STEP_SUMMARY || true

      - name: 📚 Generate Documentation (Sphinx autodoc)
        run: |
          echo "📚 Generating documentation with Sphinx autodoc..."

          mkdir -p docs

          # conf.py mínimo con autodoc y mocks
          cat << EOF > docs/conf.py
          import sys
          import os
          sys.path.insert(0, os.path.abspath('code'))

          project = 'XBee Project'
          author = 'David'
          release = '1.0'

          extensions = ['sphinx.ext.autodoc', 'sphinx.ext.napoleon', 'myst_parser']

          # Evita errores de import de módulos de MicroPython o hardware
          autodoc_mock_imports = ['ROUTER', 'END_DEVICE', 'COMUNICACION_1_XBEE', 'COMUNICACION_2_XBEE', 'Camara', 'COORD', 'TELEMANDO', 'TELEMANDO_LCD', 'SENSOR_REMOTO', 'tools']

          templates_path = ['_templates']
          exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

          html_theme = 'alabaster'
          EOF

                    # index.rst
                    cat << EOF > docs/index.rst
          XBee Project Documentation
          ==========================

          .. toctree::
            :maxdepth: 2
            :caption: Contents:

            modules
          EOF

          # modules.rst con todos los scripts
          echo "Modules" > docs/modules.rst
          echo "=======" >> docs/modules.rst
          for f in $(find code -name "*.py" -not -name "__init__.py"); do
            mod=$(echo $f | sed 's|/|.|g' | sed 's/.py$//')
            echo "" >> docs/modules.rst
            echo ".. automodule:: $mod" >> docs/modules.rst
            echo "   :members:" >> docs/modules.rst
            echo "   :undoc-members:" >> docs/modules.rst
            echo "   :show-inheritance:" >> docs/modules.rst
          done

        mkdir -p docs/_build/markdown
        sphinx-build -b markdown docs docs/_build/markdown || echo "⚠️ Sphinx build failed, continuing anyway"
        echo "✅ Documentation generated successfully."

      - name: 📤 Deploy Documentation to GitHub Wiki (if on main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🚀 Deploying generated docs to Wiki..."
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          rm -rf wiki
          git clone "https://github.com/${GITHUB_REPOSITORY}.wiki.git" wiki
          rsync -av --delete docs/_build/markdown/ wiki/

          cd wiki
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "📚 Update Wiki from CI ($GITHUB_SHA)"
            git push origin master || git push origin main
            echo "✅ Wiki updated successfully."
          else
            echo "ℹ️ No changes to commit in Wiki."
          fi

      - name: ✅ Final Summary
        run: |
          echo "### ✅ Pipeline finished successfully" >> $GITHUB_STEP_SUMMARY
          echo "All checks completed for $GITHUB_REPOSITORY" >> $GITHUB_STEP_SUMMARY
