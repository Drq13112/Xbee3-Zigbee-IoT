name: XBee Firmware Quality Check

on:
  push:
  pull_request:

jobs:
  quality_check:
    name: 🧠 Lint, Syntax & Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 📦 Install dependencies
        run: |
          pip install flake8 black pytest pytest-cov mock mpremote sphinx sphinx-rtd-theme sphinx-markdown-builder

      - name: 🧹 Lint code style (flake8)
        run: |
          echo "🔍 Checking for style and syntax issues..." | tee -a $GITHUB_STEP_SUMMARY
          flake8 code --max-line-length=120 --ignore=E402,E501,W503 | tee -a $GITHUB_STEP_SUMMARY || true

      - name: 🎨 Check formatting (black)
        run: |
          echo "🎨 Checking code format (black)..." | tee -a $GITHUB_STEP_SUMMARY
          black --check code | tee -a $GITHUB_STEP_SUMMARY || true

      - name: 🧠 MicroPython syntax validation
        run: |
          echo "🧠 Checking syntax compatibility..."
          # micropython no está instalado por defecto, así que hacemos un check con CPython
          for f in $(find code -name "*.py"); do
            echo "Validating syntax: $f"
            python -m py_compile "$f"
          done

      - name: 🧪 Run unit tests with coverage
        run: |
          echo "🧪 Running tests with coverage..."
          pytest -q --disable-warnings --cov=code --cov-report=term-missing || true
          
      - name: 📊 Upload coverage to summary
        run: |
          echo "## 📈 Coverage Report" >> $GITHUB_STEP_SUMMARY
          pytest -q --disable-warnings --cov=code --cov-report=term >> $GITHUB_STEP_SUMMARY || true

      - name: 📚 Generate Documentation with Oxygen
        run: |
          echo "📚 Generating documentation with Oxygen..."
          # Check if Oxygen DITA files exist
          if [ -d "docs/dita" ] || [ -f "docs/*.dita" ]; then
            # Assuming Oxygen CLI is available or use Docker
            # For demo, use a placeholder; replace with actual Oxygen command
            echo "Oxygen files found. Generating docs..."
            # Example: oxygen --transform docs/main.ditamap --output docs/output --format html
            # Since Oxygen CLI may not be installed, use Sphinx as fallback for Python docs
            sphinx-build -b markdown docs docs/_build/markdown || echo "Sphinx fallback used"
          else
            echo "No Oxygen DITA files found. Generating basic Sphinx docs..."
            # Create basic Sphinx docs if no DITA
            mkdir -p docs
            echo "XBee Project Documentation" > docs/index.rst
            echo "========================" >> docs/index.rst
            echo "" >> docs/index.rst
            echo "This is the documentation for the XBee project." >> docs/index.rst
            echo "" >> docs/index.rst
            echo "Contents:" >> docs/index.rst
            echo "" >> docs/index.rst
            echo ".. toctree::" >> docs/index.rst
            echo "   :maxdepth: 2" >> docs/index.rst
            echo "   :caption: Contents:" >> docs/index.rst
            echo "" >> docs/index.rst
            # Create basic conf.py for Sphinx
            cat > docs/conf.py << EOF
          project = 'XBee Project'
          copyright = '2023, David'
          author = 'David'
          release = '1.0'
          
          extensions = []
          
          templates_path = ['_templates']
          exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
          
          html_theme = 'alabaster'
          # html_static_path = ['_static']  # Removed to avoid warning
          EOF
            sphinx-build -b markdown docs docs/_build/markdown
          fi
          echo "Documentation generated successfully."

      - name: 📤 Deploy Documentation to GitHub Wiki (if on main branch)
        if: github.ref == 'refs/heads/main'
        uses: Andrew-Chen-Wang/github-wiki-action@v1
        with:
          WIKI_DIR: docs/_build/markdown  # Directory with generated Markdown docs
          GH_PAT: ${{ secrets.GITHUB_TOKEN }}
          WIKI_PUSH_MESSAGE: "Update documentation from CI"

      - name: ✅ Final Summary
        run: |
          echo "### ✅ Pipeline finished successfully" >> $GITHUB_STEP_SUMMARY
          echo "All checks completed for $GITHUB_REPOSITORY" >> $GITHUB_STEP_SUMMARY